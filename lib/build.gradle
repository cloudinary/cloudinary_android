apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // filter in the api credentials before building but without changing original source
        // files - to make sure the credentials are not checked into source control.
        // The url is taken from a property or environment variable:
        manifestPlaceholders = [cloudinaryUrl: getCloudinaryUrl() ?: ""]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

task verifyCloudinaryCredentials {
    doFirst {
        if (!getCloudinaryUrl()) {
            throw new GradleException("Missing credentials: please set CLOUDINARY_URL environment variable or cloudianryUrl property.")
        }
    }
}

// Force cloudinary credentials when running unit tests and connected device tests
tasks.matching { it.name.startsWith("connected") || it.name.startsWith("test")}.all { task ->
    task.dependsOn verifyCloudinaryCredentials
}

dependencies {
    api "com.cloudinary:cloudinary-core:${cloudinaryLibsVersion}"

    implementation "com.android.support:support-compat:${androidSupportVersion}"
    implementation('com.evernote:android-job:1.2.6', {
        exclude group: 'com.android.support', module: 'support-compat'
    })

    testImplementation 'junit:junit:4.12'
    testImplementation "com.cloudinary:cloudinary-test-common:${cloudinaryLibsVersion}"

    androidTestImplementation 'org.awaitility:awaitility:3.0.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestImplementation "com.android.support:support-annotations:${androidSupportVersion}"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation "org.hamcrest:hamcrest-library:1.3"
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: publishRepo) {
                authentication(userName: project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : "", password: project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : "")
            }

            snapshotRepository(url: snapshotRepo) {
                authentication(userName: project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : "", password: project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : "")
            }

            pom.project {
                groupId publishGroupId
                artifactId 'cloudinary-android'
                name 'Cloudinary Android Library'
                description publishDescription
                packaging 'aar'
                version version

                url githubUrl

                scm {
                    connection scmConnection
                    developerConnection scmDeveloperConnection
                    url scmUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }

            pom.whenConfigured { pom ->
                pom.dependencies.forEach { dep ->
                    if (dep.getVersion() == "unspecified") {
                        dep.setGroupId(publishGroupId)
                        dep.setVersion(version)
                    }
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { var -> classpath += var.javaCompiler.classpath }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}