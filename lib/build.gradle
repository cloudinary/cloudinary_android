apply plugin: 'com.android.library'
apply plugin: 'signing'
apply plugin: "de.marcphilipp.nexus-publish"
apply plugin: "io.codearte.nexus-staging"
apply plugin: 'digital.wup.android-maven-publish'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // filter in the api credentials before building but without changing original source
        // files - to make sure the credentials are not checked into source control.
        // The url is taken from a property or environment variable:
        manifestPlaceholders = [cloudinaryUrl: getCloudinaryUrl() ?: ""]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

task verifyCloudinaryCredentials {
    doFirst {
        if (!getCloudinaryUrl()) {
            throw new GradleException("Missing credentials: please set CLOUDINARY_URL environment variable or cloudianryUrl property.")
        }
    }
}

// Force cloudinary credentials when running unit tests and connected device tests
tasks.matching { it.name.startsWith("connected") || it.name.startsWith("test")}.all { task ->
    task.dependsOn verifyCloudinaryCredentials
}

dependencies {
    api "com.cloudinary:cloudinary-core:${cloudinaryLibsVersion}"

    implementation "com.android.support:support-compat:${androidSupportVersion}"
    implementation('com.evernote:android-job:1.2.6', {
        exclude group: 'com.android.support', module: 'support-compat'
    })

    testImplementation 'junit:junit:4.12'
    testImplementation "com.cloudinary:cloudinary-test-common:${cloudinaryLibsVersion}"

    androidTestImplementation 'org.awaitility:awaitility:3.0.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestImplementation "com.android.support:support-annotations:${androidSupportVersion}"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation "org.hamcrest:hamcrest-library:1.3"
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { var -> classpath += var.javaCompileProvider.get().classpath}
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

if (hasProperty("ossrhPassword")) {
    signing {
        sign configurations.archives
    }

    nexusStaging {
        packageGroup = group
        username = project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : ""
        password = project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : ""
    }

    publishing {
        publications {
            mavenAar(MavenPublication) {
                from components.android

                artifact(file("$buildDir/outputs/aar/lib-release.aar.asc")) {
                    classifier = null
                    extension = 'aar.asc'
                }

                pom {
                    name = 'Cloudinary Android Library'
                    packaging = 'aar'
                    groupId = publishGroupId
                    artifactId = 'cloudinary-android'
                    description = publishDescription
                    url = githubUrl
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }

                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = scmConnection
                        developerConnection = scmDeveloperConnection
                        url = scmUrl
                    }
                }

                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }

        nexusPublishing {
            repositories {
                sonatype {
                    username = project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : ""
                    password = project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : ""
                }
            }
        }

        model {
            tasks.generatePomFileForMavenAarPublication {
                destination = file("$buildDir/generated-pom.xml")
            }
            tasks.publishMavenAarPublicationToMavenLocal {
                dependsOn project.tasks.signArchives
            }
            tasks.publishMavenAarPublicationToSonatypeRepository {
                dependsOn project.tasks.signArchives
            }
        }
    }
}